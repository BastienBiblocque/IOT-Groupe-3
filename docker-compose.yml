services:
  mqtt:
    image: eclipse-mosquitto:2.0
    restart: unless-stopped
    volumes:
      - './mosquitto-data:/mosquitto'
    ports:
      - '1883:1883'
      - '9001:9001'
    command: 'mosquitto -c /mosquitto-no-auth.conf'

  zigbee2mqtt:
    container_name: zigbee2mqtt
    restart: unless-stopped
    image: koenkk/zigbee2mqtt
    volumes:
      - ./zigbee2mqtt-data:/app/data
      - /run/udev:/run/udev:ro
    ports:
      - 8080:8080
    environment:
      - TZ=Europe/Berlin
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=temperatures_data
      - MYSQL_USER=iot
      - MYSQL_PASSWORD=iot
    ports:
      - "3306:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h mysql -u iot --password=iot || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # subscriber:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.subscriber
  #   environment:
  #     - MQTT_BROKER=mosquitto
  #     - DB_HOST=mysql
  #     - DB_PORT=3306
  #     - DB_USER=iot
  #     - DB_PASSWORD=iot
  #     - DB_NAME=temperatures_data
  #   depends_on:
  #     - mqtt
  #     - mysql
  #   volumes:
  #     - ./subscriber.py:/app/subscriber.py
    # healthcheck:
    #   test: ["CMD-SHELL", "mysqladmin ping -h mysql -u iot --password=iot || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 10
    #   start_period: 30s
    # restart: always

  subscriber2:
    build:
      context: .
      dockerfile: Dockerfile.subscriber
    environment:
      - PYTHONUNBUFFERED=1
      - MQTT_BROKER=mosquitto
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=iot
      - DB_PASSWORD=iot
      - DB_NAME=temperatures_data
    depends_on:
      - mqtt
      - mysql
    volumes:
      - ./subscriber2.py:/app/subscriber.py
    restart: always
      
  data_cron:
    build:
      context: .
      dockerfile: Dockerfile.send_data_cron
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=iot
      - DB_PASSWORD=iot
      - DB_NAME=temperatures_data
    depends_on:
      - mysql
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h mysql -u iot --password=iot || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  clean_db_cron:
      build:
        context: .
        dockerfile: Dockerfile.clean_db
      environment:
        - DB_HOST=mysql
        - DB_PORT=3306
        - DB_USER=iot
        - DB_PASSWORD=iot
        - DB_NAME=temperatures_data
        - TZ=Europe/Paris
      depends_on:
        - mysql
      healthcheck:
        test: ["CMD-SHELL", "mysqladmin ping -h mysql -u iot --password=iot || exit 1"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s  